user  www-data;

# Ideally one worker process per CPU core
worker_processes auto;

pid        /var/run/nginx.pid;

events {

  #
  # Determines how many clients will be served by each worker process.
  # (Max clients = worker_connections * worker_processes)
  # Ideally should be equal to `ulimit -n`
  #
  worker_connections 10240;

  #
  # Let each process accept multiple connections.
  # Accept as many connections as possible, after nginx gets
  # notification about a new connection.
  # May flood worker_connections, if that option is set too low.
  #
  multi_accept on;

  #
  # Preferred connection method for newer linux versions.
  # Essential for linux, optimized to serve many clients with each thread.
  #
  # Doesnâ€™t work on Mac?
  #
  use epoll;
}


http {

  ##
  # Basic Settings
  ##

  # Hide nginx version
  server_tokens off;

  #
  # Override some buffer limitations, will prevent DDOS too.
  #
  client_body_buffer_size 16K;  # default 16k
  client_header_buffer_size 1k; # default 1k
  client_max_body_size 100m;    # default 1m
  large_client_header_buffers 4 16k; # default 4 8k

  #
  # Timeouts
  # The client_body_timeout and client_header_timeout directives are
  # responsible for the time a server will wait for a client body or
  # client header to be sent after request. If neither a body or header
  # is sent, the server will issue a 408 error or Request time out.
  #
  # The keepalive_timeout assigns the timeout for keep-alive connections
  # with the client. Simply put, Nginx will close connections with the
  # client after this period of time.
  #
  # Finally, the send_timeout is a timeout for transmitting a response
  # to the client. If the client does not receive anything within this
  # time, then the connection will be closed.
  #

  #
  # send the client a "request timed out" if the body is not loaded
  # by this time. Default 60.
  #
  client_body_timeout   32;
  client_header_timeout 32;

  #
  # Every 60 seconds server broadcasts Sync packets, so 90 is
  # a conservative upper bound.
  #
  keepalive_timeout 90; # default 65
  send_timeout 120;     # default 60

  #
  # Allow the server to close the connection after a client stops
  # responding.
  # Frees up socket-associated memory.
  #
  reset_timedout_connection on;

  #
  # Open file descriptors.
  # Caches information about open FDs, freqently accessed files.
  #
  open_file_cache max=1000 inactive=20s; # default off
  open_file_cache_valid 30s;  # default 60s
  open_file_cache_min_uses 2; # default 1
  open_file_cache_errors on;  # default off

  #
  # Sendfile copies data between one FD and other from within the kernel.
  # More efficient than read() + write(), since the requires transferring
  # data to and from the user space.
  #
  sendfile on;

  # Tcp_nopush causes nginx to attempt to send its HTTP response head in one
  # packet, instead of using partial frames. This is useful for prepending
  # headers before calling sendfile, or for throughput optimization.
  tcp_nopush on; # default off

  #
  # Don't buffer data-sends (disable Nagle algorithm). Good for
  # sending frequent small bursts of data in real time.
  #
  tcp_nodelay on;

  types_hash_max_size 2048; # default 1024

  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  ##
  # Disable HTTP_PROXY
  ##

  fastcgi_param HTTP_PROXY "";
  proxy_set_header HTTP_PROXY "";

  ##
  # Logging Settings
  ##

  #
  # Use analytics to track stuff instead of using precious file IO resources.
  # Disabling logging speeds up IO.
  #
  #access_log off;
  # Direct error logs to stdout
  #error_log /dev/stdout crit;

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

  access_log  /var/log/nginx/access.log  main;
  error_log  /var/log/nginx/error.log;

  ##
  # Gzip Settings
  ##

  # Enable Gzip compressed.
  gzip on;

  # Compression level (1-9).
  # 5 is a perfect compromise between size and cpu usage, offering about
  # 75% reduction for most ascii files (almost identical to level 9).
  gzip_comp_level    5;

  # Don't compress anything that's already small and unlikely to shrink much
  # if at all (the default is 20 bytes, which is bad as that usually leads to
  # larger files after gzipping).
  gzip_min_length    256;

  # Compress data even for clients that are connecting to us via proxies,
  # identified by the "Via" header (required for CloudFront).
  gzip_proxied       any;

  # Tell proxies to cache both the gzipped and regular version of a resource
  # whenever the client's Accept-Encoding capabilities header varies;
  # Avoids the issue where a non-gzip capable client (which is extremely rare
  # today) would display gibberish if their proxy gave them the gzipped version.
  gzip_vary          on;

  # Compress all output labeled with one of the following MIME-types.
  gzip_types
    application/atom+xml
    application/javascript
    application/json
    application/ld+json
    application/manifest+json
    application/rss+xml
    application/vnd.geo+json
    application/vnd.ms-fontobject
    application/x-font-ttf
    application/x-javascript
    application/x-web-app-manifest+json
    application/xhtml+xml
    application/xml
    font/opentype
    image/bmp
    image/svg+xml
    image/x-icon
    text/cache-manifest
    text/css
    text/javascript
    text/xml
    text/plain
    text/vcard
    text/vnd.rim.location.xloc
    text/vtt
    text/x-component
    text/x-cross-domain-policy;
    # text/html is always compressed by HttpGzipModule

  # Prevent listing of directory contents
  autoindex off;

  ##
  # Virtual Host Configs
  ##

  #include /etc/nginx/conf.d/*.conf;

  server {
    listen   80; ## listen for ipv4; this line is default and implied
    listen   [::]:80 default ipv6only=on; ## listen for ipv6
    #listen  443 ssl http2;

    server_name _; # This is just an invalid value which will never trigger on a real hostname.

    root /var/www/public;
    index index.php;
    charset utf-8;

    # Increase body size to upload large files in Craft
    client_max_body_size 100m;

    error_page 404 /index.php;

    # Root directory location handler
    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    ##
    # PHP-FPM Configuration
    ##
    location ~ [^/]\.php(/|$) {
      #try_files $uri =404;
      try_files $uri $uri/ /index.php?$query_string;
      fastcgi_split_path_info ^(.+\.php)(/.+)$;
      #fastcgi_pass unix:/var/run/php/php8.2-fpm.sock;
      #fastcgi_pass unix:/run/php/php8.2-fpm.sock;
      fastcgi_pass application:9000;
      fastcgi_index index.php;
      include fastcgi_params;
      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;

      # Don't allow browser caching of dynamically generated content
      add_header Last-Modified $date_gmt;
      add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
      if_modified_since off;
      expires off;
      etag off;

      # Add security headers again via https://securityheaders.io
      # add_header used in this location block removes any already added headers
      add_header X-Frame-Options "SAMEORIGIN";
      add_header X-XSS-Protection "1; mode=block";
      add_header X-Content-Type-Options "nosniff";

      fastcgi_intercept_errors off;
      fastcgi_buffer_size 16k;
      fastcgi_buffers 4 16k;
      fastcgi_connect_timeout 300;
      fastcgi_send_timeout 300;
      fastcgi_read_timeout 300;

      proxy_connect_timeout 120s;
      proxy_send_timeout 120s;
      proxy_read_timeout 120s;
    }

    ##
    # Cache Settings
    ##

    # Feed
    location ~* \.(?:rss|atom)$ {
      expires 1h;
      add_header Cache-Control "public";
    }

    # Media: images, icons, video, audio, HTC
    location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp3|mp4|ogg|ogv|webm|htc|webp)$ {
      etag off;
      expires 1M;
      access_log off;
      # max-age=2592000 = 1 month in seconds, stale-while-revalidate=86400 = 1 day in seconds
      add_header Cache-Control "public, max-age=2592000, must-revalidate, stale-while-revalidate=86400";
    }

    # CSS and Javascript
    location ~* \.(?:css|js)$ {
      etag off;
      expires 1y;
      access_log off;
      # max-age=31556952 = 1 year in seconds
      add_header Cache-Control "public, max-age=31556952, immutable";
    }

    # WebFonts
    location ~* \.(?:ttf|ttc|otf|eot|woff|woff2)$ {
      etag off;
      add_header "Access-Control-Allow-Origin" "*";
      expires 1M;
      access_log off;
      # max-age=2592000 = 1 month in seconds, stale-while-revalidate=86400 = 1 day in seconds
      add_header Cache-Control "public, max-age=2592000, must-revalidate, stale-while-revalidate=86400";
    }

    ##
    # Security Settings
    ##

    # Security headers via https://securityheaders.io
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options "nosniff";

    location = /robots.txt  { access_log off; log_not_found off; }
    location = /favicon.ico { access_log off; log_not_found off; }
    location ~ /\. { access_log off; log_not_found off; deny all; }
  }
}

